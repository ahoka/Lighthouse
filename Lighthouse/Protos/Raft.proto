syntax = "proto3";

option csharp_namespace = "Lighthouse.Protocol";

//package Raft;

service Raft {
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteReply);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesReply);
  rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotReply);
}

message LogEntry {

}

message RequestVoteRequest {
    uint64 term = 1; // candidate’s term
    string candidateId = 2; // candidate requesting vote
    uint64 lastLogIndex = 3; // index of candidate’s last log entry (§5.4)
    uint64 lastLogTerm = 4; // term of candidate’s last log entry (§5.4)
}

message RequestVoteReply {
    uint64 term = 1; // currentTerm, for candidate to update itself
    bool voteGranted = 2; // true means candidate received vote
}

message AppendEntriesRequest {
    uint64 term = 1; // leader’s term
    string leaderId = 2; // so follower can redirect clients
    uint64 prevLogIndex = 3; // index of log entry immediately preceding new ones
    uint64 prevLogTerm = 4; // term of prevLogIndex entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat;may send more than one for efficiency)
    uint64 leaderCommit = 6; // leader’s commitIndex
}

message AppendEntriesReply {
    uint64 term = 1; // currentTerm, for leader to update itself
    bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message InstallSnapshotRequest {
    uint64 term = 1; // leader’s term 
    string leaderId = 2; // so follower can redirect clients
    uint64 lastIncludedIndex = 3; // the snapshot replaces all entries up through and including this index
    uint64 lastIncludedTerm = 4; // term of lastIncludedIndex
    uint64 offset = 5; // byte offset where chunk is positioned in thesnapshot file
    bytes data = 6; // raw bytes of the snapshot chunk, starting at offset
    bool done = 7; // true if this is the last chunk
}

message InstallSnapshotReply {
    uint64 term = 1; // currentTerm, for leader to update itself
}
