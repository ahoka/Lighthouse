syntax = "proto3";

option csharp_namespace = "Lighthouse";

//package Raft;

service Raft {
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteReply);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesReply);
  rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotReply);
}

message NodeID {
    string value = 1;
}

message Term {
    uint64 value = 1;
}

message LogIndex {
    uint64 value = 1;
}

message LogEntry {

}

message RequestVoteRequest {
    Term term = 1; // candidate’s term
    NodeID candidateId = 2; // candidate requesting vote
    LogIndex lastLogIndex = 3; // index of candidate’s last log entry (§5.4)
    Term lastLogTerm = 4; // term of candidate’s last log entry (§5.4)
}

message RequestVoteReply {
  Term term = 1; // currentTerm, for candidate to update itself
  bool voteGranted = 2; // true means candidate received vote
}

message AppendEntriesRequest {
    Term term = 1; // leader’s term
    NodeID leaderId = 2; // so follower can redirect clients
    LogIndex prevLogIndex = 3; // index of log entry immediately preceding new ones
    Term prevLogTerm = 4; // term of prevLogIndex entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat;may send more than one for efficiency)
    LogIndex leaderCommit = 6; // leader’s commitIndex
}

message AppendEntriesReply {
    Term term = 1; // currentTerm, for leader to update itself
    bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message InstallSnapshotRequest {
    Term term = 1; // leader’s term 
    NodeID leaderId = 2; // so follower can redirect clients
    LogIndex lastIncludedIndex = 3; // the snapshot replaces all entries up through and including this index
    Term lastIncludedTerm = 4; // term of lastIncludedIndex
    uint64 offset = 5; // byte offset where chunk is positioned in thesnapshot file
    bytes data = 6; // raw bytes of the snapshot chunk, starting at offset
    bool done = 7; // true if this is the last chunk
}

message InstallSnapshotReply {
    Term term = 1; // currentTerm, for leader to update itself
}
